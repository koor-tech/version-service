// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/version_service.proto

package apiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CurrentVersions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CurrentVersions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentVersions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentVersionsMultiError, or nil if none found.
func (m *CurrentVersions) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentVersions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kube

	// no validation rules for KoorOperator

	// no validation rules for Ksd

	// no validation rules for Ceph

	if len(errors) > 0 {
		return CurrentVersionsMultiError(errors)
	}

	return nil
}

// CurrentVersionsMultiError is an error wrapping multiple validation errors
// returned by CurrentVersions.ValidateAll() if the designated constraints
// aren't met.
type CurrentVersionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentVersionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentVersionsMultiError) AllErrors() []error { return m }

// CurrentVersionsValidationError is the validation error returned by
// CurrentVersions.Validate if the designated constraints aren't met.
type CurrentVersionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentVersionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentVersionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentVersionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentVersionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentVersionsValidationError) ErrorName() string { return "CurrentVersionsValidationError" }

// Error satisfies the builtin error interface
func (e CurrentVersionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentVersions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentVersionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentVersionsValidationError{}

// Validate checks the field values on OperatorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperatorRequestMultiError, or nil if none found.
func (m *OperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCurrentVersions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperatorRequestValidationError{
					field:  "CurrentVersions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperatorRequestValidationError{
					field:  "CurrentVersions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentVersions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperatorRequestValidationError{
				field:  "CurrentVersions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OperatorRequestMultiError(errors)
	}

	return nil
}

// OperatorRequestMultiError is an error wrapping multiple validation errors
// returned by OperatorRequest.ValidateAll() if the designated constraints
// aren't met.
type OperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorRequestMultiError) AllErrors() []error { return m }

// OperatorRequestValidationError is the validation error returned by
// OperatorRequest.Validate if the designated constraints aren't met.
type OperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorRequestValidationError) ErrorName() string { return "OperatorRequestValidationError" }

// Error satisfies the builtin error interface
func (e OperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorRequestValidationError{}

// Validate checks the field values on ImageVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageVersionMultiError, or
// nil if none found.
func (m *ImageVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if uri, err := url.Parse(m.GetImage()); err != nil {
		err = ImageVersionValidationError{
			field:  "Image",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := ImageVersionValidationError{
			field:  "Image",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Hash

	if len(errors) > 0 {
		return ImageVersionMultiError(errors)
	}

	return nil
}

// ImageVersionMultiError is an error wrapping multiple validation errors
// returned by ImageVersion.ValidateAll() if the designated constraints aren't met.
type ImageVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageVersionMultiError) AllErrors() []error { return m }

// ImageVersionValidationError is the validation error returned by
// ImageVersion.Validate if the designated constraints aren't met.
type ImageVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageVersionValidationError) ErrorName() string { return "ImageVersionValidationError" }

// Error satisfies the builtin error interface
func (e ImageVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageVersionValidationError{}

// Validate checks the field values on HelmVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelmVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelmVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelmVersionMultiError, or
// nil if none found.
func (m *HelmVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *HelmVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if uri, err := url.Parse(m.GetRepository()); err != nil {
		err = HelmVersionValidationError{
			field:  "Repository",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := HelmVersionValidationError{
			field:  "Repository",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Chart

	if len(errors) > 0 {
		return HelmVersionMultiError(errors)
	}

	return nil
}

// HelmVersionMultiError is an error wrapping multiple validation errors
// returned by HelmVersion.ValidateAll() if the designated constraints aren't met.
type HelmVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelmVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelmVersionMultiError) AllErrors() []error { return m }

// HelmVersionValidationError is the validation error returned by
// HelmVersion.Validate if the designated constraints aren't met.
type HelmVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelmVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelmVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelmVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelmVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelmVersionValidationError) ErrorName() string { return "HelmVersionValidationError" }

// Error satisfies the builtin error interface
func (e HelmVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelmVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelmVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelmVersionValidationError{}

// Validate checks the field values on LatestVersions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LatestVersions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LatestVersions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LatestVersionsMultiError,
// or nil if none found.
func (m *LatestVersions) ValidateAll() error {
	return m.validate(true)
}

func (m *LatestVersions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKoorOperator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LatestVersionsValidationError{
					field:  "KoorOperator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LatestVersionsValidationError{
					field:  "KoorOperator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKoorOperator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LatestVersionsValidationError{
				field:  "KoorOperator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetKsd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LatestVersionsValidationError{
					field:  "Ksd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LatestVersionsValidationError{
					field:  "Ksd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKsd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LatestVersionsValidationError{
				field:  "Ksd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCeph()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LatestVersionsValidationError{
					field:  "Ceph",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LatestVersionsValidationError{
					field:  "Ceph",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCeph()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LatestVersionsValidationError{
				field:  "Ceph",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LatestVersionsMultiError(errors)
	}

	return nil
}

// LatestVersionsMultiError is an error wrapping multiple validation errors
// returned by LatestVersions.ValidateAll() if the designated constraints
// aren't met.
type LatestVersionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LatestVersionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LatestVersionsMultiError) AllErrors() []error { return m }

// LatestVersionsValidationError is the validation error returned by
// LatestVersions.Validate if the designated constraints aren't met.
type LatestVersionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LatestVersionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LatestVersionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LatestVersionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LatestVersionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LatestVersionsValidationError) ErrorName() string { return "LatestVersionsValidationError" }

// Error satisfies the builtin error interface
func (e LatestVersionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLatestVersions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LatestVersionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LatestVersionsValidationError{}

// Validate checks the field values on OperatorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperatorResponseMultiError, or nil if none found.
func (m *OperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLatestVersions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperatorResponseValidationError{
					field:  "LatestVersions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperatorResponseValidationError{
					field:  "LatestVersions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatestVersions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperatorResponseValidationError{
				field:  "LatestVersions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OperatorResponseMultiError(errors)
	}

	return nil
}

// OperatorResponseMultiError is an error wrapping multiple validation errors
// returned by OperatorResponse.ValidateAll() if the designated constraints
// aren't met.
type OperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorResponseMultiError) AllErrors() []error { return m }

// OperatorResponseValidationError is the validation error returned by
// OperatorResponse.Validate if the designated constraints aren't met.
type OperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorResponseValidationError) ErrorName() string { return "OperatorResponseValidationError" }

// Error satisfies the builtin error interface
func (e OperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorResponseValidationError{}
