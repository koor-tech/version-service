// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/v1/version_service.proto

package apiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SimpleVersions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SimpleVersions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SimpleVersions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SimpleVersionsMultiError,
// or nil if none found.
func (m *SimpleVersions) ValidateAll() error {
	return m.validate(true)
}

func (m *SimpleVersions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_SimpleVersions_Kube_Pattern.MatchString(m.GetKube()) {
		err := SimpleVersionsValidationError{
			field:  "Kube",
			reason: "value does not match regex pattern \"^v?\\\\d+(?:\\\\.\\\\d+){0,2}(?:\\\\-\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SimpleVersions_KoorOperator_Pattern.MatchString(m.GetKoorOperator()) {
		err := SimpleVersionsValidationError{
			field:  "KoorOperator",
			reason: "value does not match regex pattern \"^v?\\\\d+(?:\\\\.\\\\d+){0,2}(?:\\\\-\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SimpleVersions_Ksd_Pattern.MatchString(m.GetKsd()) {
		err := SimpleVersionsValidationError{
			field:  "Ksd",
			reason: "value does not match regex pattern \"^v?\\\\d+(?:\\\\.\\\\d+){0,2}(?:\\\\-\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SimpleVersions_Ceph_Pattern.MatchString(m.GetCeph()) {
		err := SimpleVersionsValidationError{
			field:  "Ceph",
			reason: "value does not match regex pattern \"^v?\\\\d+(?:\\\\.\\\\d+){0,2}(?:\\\\-\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SimpleVersionsMultiError(errors)
	}

	return nil
}

// SimpleVersionsMultiError is an error wrapping multiple validation errors
// returned by SimpleVersions.ValidateAll() if the designated constraints
// aren't met.
type SimpleVersionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SimpleVersionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SimpleVersionsMultiError) AllErrors() []error { return m }

// SimpleVersionsValidationError is the validation error returned by
// SimpleVersions.Validate if the designated constraints aren't met.
type SimpleVersionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimpleVersionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimpleVersionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimpleVersionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimpleVersionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimpleVersionsValidationError) ErrorName() string { return "SimpleVersionsValidationError" }

// Error satisfies the builtin error interface
func (e SimpleVersionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimpleVersions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimpleVersionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimpleVersionsValidationError{}

var _SimpleVersions_Kube_Pattern = regexp.MustCompile("^v?\\d+(?:\\.\\d+){0,2}(?:\\-\\d+)?$")

var _SimpleVersions_KoorOperator_Pattern = regexp.MustCompile("^v?\\d+(?:\\.\\d+){0,2}(?:\\-\\d+)?$")

var _SimpleVersions_Ksd_Pattern = regexp.MustCompile("^v?\\d+(?:\\.\\d+){0,2}(?:\\-\\d+)?$")

var _SimpleVersions_Ceph_Pattern = regexp.MustCompile("^v?\\d+(?:\\.\\d+){0,2}(?:\\-\\d+)?$")

// Validate checks the field values on OperatorRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OperatorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperatorRequestMultiError, or nil if none found.
func (m *OperatorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVersions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperatorRequestValidationError{
					field:  "Versions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperatorRequestValidationError{
					field:  "Versions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVersions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperatorRequestValidationError{
				field:  "Versions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OperatorRequestMultiError(errors)
	}

	return nil
}

// OperatorRequestMultiError is an error wrapping multiple validation errors
// returned by OperatorRequest.ValidateAll() if the designated constraints
// aren't met.
type OperatorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorRequestMultiError) AllErrors() []error { return m }

// OperatorRequestValidationError is the validation error returned by
// OperatorRequest.Validate if the designated constraints aren't met.
type OperatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorRequestValidationError) ErrorName() string { return "OperatorRequestValidationError" }

// Error satisfies the builtin error interface
func (e OperatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorRequestValidationError{}

// Validate checks the field values on ImageVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageVersionMultiError, or
// nil if none found.
func (m *ImageVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ImageVersion_Version_Pattern.MatchString(m.GetVersion()) {
		err := ImageVersionValidationError{
			field:  "Version",
			reason: "value does not match regex pattern \"^v?\\\\d+(?:\\\\.\\\\d+){0,2}(?:\\\\-\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetImage()); err != nil {
		err = ImageVersionValidationError{
			field:  "Image",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := ImageVersionValidationError{
			field:  "Image",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Hash

	if len(errors) > 0 {
		return ImageVersionMultiError(errors)
	}

	return nil
}

// ImageVersionMultiError is an error wrapping multiple validation errors
// returned by ImageVersion.ValidateAll() if the designated constraints aren't met.
type ImageVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageVersionMultiError) AllErrors() []error { return m }

// ImageVersionValidationError is the validation error returned by
// ImageVersion.Validate if the designated constraints aren't met.
type ImageVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageVersionValidationError) ErrorName() string { return "ImageVersionValidationError" }

// Error satisfies the builtin error interface
func (e ImageVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageVersionValidationError{}

var _ImageVersion_Version_Pattern = regexp.MustCompile("^v?\\d+(?:\\.\\d+){0,2}(?:\\-\\d+)?$")

// Validate checks the field values on HelmVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HelmVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HelmVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HelmVersionMultiError, or
// nil if none found.
func (m *HelmVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *HelmVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_HelmVersion_Version_Pattern.MatchString(m.GetVersion()) {
		err := HelmVersionValidationError{
			field:  "Version",
			reason: "value does not match regex pattern \"^v?\\\\d+(?:\\\\.\\\\d+){0,2}(?:\\\\-\\\\d+)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetRepository()); err != nil {
		err = HelmVersionValidationError{
			field:  "Repository",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := HelmVersionValidationError{
			field:  "Repository",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Chart

	if uri, err := url.Parse(m.GetImage()); err != nil {
		err = HelmVersionValidationError{
			field:  "Image",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := HelmVersionValidationError{
			field:  "Image",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Hash

	if len(errors) > 0 {
		return HelmVersionMultiError(errors)
	}

	return nil
}

// HelmVersionMultiError is an error wrapping multiple validation errors
// returned by HelmVersion.ValidateAll() if the designated constraints aren't met.
type HelmVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelmVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelmVersionMultiError) AllErrors() []error { return m }

// HelmVersionValidationError is the validation error returned by
// HelmVersion.Validate if the designated constraints aren't met.
type HelmVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelmVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelmVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelmVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelmVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelmVersionValidationError) ErrorName() string { return "HelmVersionValidationError" }

// Error satisfies the builtin error interface
func (e HelmVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelmVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelmVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelmVersionValidationError{}

var _HelmVersion_Version_Pattern = regexp.MustCompile("^v?\\d+(?:\\.\\d+){0,2}(?:\\-\\d+)?$")

// Validate checks the field values on DetailedVersions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DetailedVersions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetailedVersions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetailedVersionsMultiError, or nil if none found.
func (m *DetailedVersions) ValidateAll() error {
	return m.validate(true)
}

func (m *DetailedVersions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKoorOperator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DetailedVersionsValidationError{
					field:  "KoorOperator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DetailedVersionsValidationError{
					field:  "KoorOperator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKoorOperator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DetailedVersionsValidationError{
				field:  "KoorOperator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetKsd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DetailedVersionsValidationError{
					field:  "Ksd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DetailedVersionsValidationError{
					field:  "Ksd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKsd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DetailedVersionsValidationError{
				field:  "Ksd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCeph()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DetailedVersionsValidationError{
					field:  "Ceph",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DetailedVersionsValidationError{
					field:  "Ceph",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCeph()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DetailedVersionsValidationError{
				field:  "Ceph",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DetailedVersionsMultiError(errors)
	}

	return nil
}

// DetailedVersionsMultiError is an error wrapping multiple validation errors
// returned by DetailedVersions.ValidateAll() if the designated constraints
// aren't met.
type DetailedVersionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetailedVersionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetailedVersionsMultiError) AllErrors() []error { return m }

// DetailedVersionsValidationError is the validation error returned by
// DetailedVersions.Validate if the designated constraints aren't met.
type DetailedVersionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailedVersionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailedVersionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailedVersionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailedVersionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailedVersionsValidationError) ErrorName() string { return "DetailedVersionsValidationError" }

// Error satisfies the builtin error interface
func (e DetailedVersionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetailedVersions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailedVersionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailedVersionsValidationError{}

// Validate checks the field values on OperatorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OperatorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OperatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OperatorResponseMultiError, or nil if none found.
func (m *OperatorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OperatorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVersions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OperatorResponseValidationError{
					field:  "Versions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OperatorResponseValidationError{
					field:  "Versions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVersions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperatorResponseValidationError{
				field:  "Versions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OperatorResponseMultiError(errors)
	}

	return nil
}

// OperatorResponseMultiError is an error wrapping multiple validation errors
// returned by OperatorResponse.ValidateAll() if the designated constraints
// aren't met.
type OperatorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OperatorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OperatorResponseMultiError) AllErrors() []error { return m }

// OperatorResponseValidationError is the validation error returned by
// OperatorResponse.Validate if the designated constraints aren't met.
type OperatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperatorResponseValidationError) ErrorName() string { return "OperatorResponseValidationError" }

// Error satisfies the builtin error interface
func (e OperatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperatorResponseValidationError{}

// Validate checks the field values on VersionMatrix with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VersionMatrix) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionMatrix with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VersionMatrixMultiError, or
// nil if none found.
func (m *VersionMatrix) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionMatrix) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetKoorOperator()))
		i := 0
		for key := range m.GetKoorOperator() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetKoorOperator()[key]
			_ = val

			// no validation rules for KoorOperator[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, VersionMatrixValidationError{
							field:  fmt.Sprintf("KoorOperator[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, VersionMatrixValidationError{
							field:  fmt.Sprintf("KoorOperator[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return VersionMatrixValidationError{
						field:  fmt.Sprintf("KoorOperator[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetKsd()))
		i := 0
		for key := range m.GetKsd() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetKsd()[key]
			_ = val

			// no validation rules for Ksd[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, VersionMatrixValidationError{
							field:  fmt.Sprintf("Ksd[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, VersionMatrixValidationError{
							field:  fmt.Sprintf("Ksd[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return VersionMatrixValidationError{
						field:  fmt.Sprintf("Ksd[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetCeph()))
		i := 0
		for key := range m.GetCeph() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetCeph()[key]
			_ = val

			// no validation rules for Ceph[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, VersionMatrixValidationError{
							field:  fmt.Sprintf("Ceph[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, VersionMatrixValidationError{
							field:  fmt.Sprintf("Ceph[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return VersionMatrixValidationError{
						field:  fmt.Sprintf("Ceph[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return VersionMatrixMultiError(errors)
	}

	return nil
}

// VersionMatrixMultiError is an error wrapping multiple validation errors
// returned by VersionMatrix.ValidateAll() if the designated constraints
// aren't met.
type VersionMatrixMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionMatrixMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionMatrixMultiError) AllErrors() []error { return m }

// VersionMatrixValidationError is the validation error returned by
// VersionMatrix.Validate if the designated constraints aren't met.
type VersionMatrixValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionMatrixValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionMatrixValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionMatrixValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionMatrixValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionMatrixValidationError) ErrorName() string { return "VersionMatrixValidationError" }

// Error satisfies the builtin error interface
func (e VersionMatrixValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionMatrix.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionMatrixValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionMatrixValidationError{}
